@using PetProject.Models;
@using PetProject.Services;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Web;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<AppUser> UserManager
@inject ApplicationDbService DbService

<CascadingAuthenticationState>
    <div class="card">
        <AuthorizeView>
            <Authorized>
                <button @onclick="(e => Reroll())">Reroll</button>
            </Authorized>
        </AuthorizeView>
        <div class="card-columns">

            @foreach (var fighter in Fighters)
            {
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-text">@fighter.Name</h3>
                    </div>
                    <img class="card-img-top" src="@fighter.Image" alt="@fighter.Name" style="height:100%">
                    <div class="card-text">
                        <p>
                            @fighter.Level
                        </p>
                        <p>
                            @fighter.Price
                        </p>
                    </div>
                    <AuthorizeView>
                        <Authorized>
                            <button @onclick="(e => Buy(fighter))">Buy</button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            }
        </div>
    </div>
</CascadingAuthenticationState>

@code {
    public AppUser User { get; set; }
    public List<Fighter> Fighters { get; set; }

    void Reroll()
    {
        Fighters = DbService.RandomFighters().ToList();
    }

    void Buy(Fighter fighter)
    {
        DbService.BuyFighter(fighter, User);
        Fighters.Remove(fighter);
    }

    protected override async Task OnInitializedAsync()
    {
        Reroll();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = await UserManager.GetUserAsync(authState.User);
    }
}
